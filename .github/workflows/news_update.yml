name: news.json update

on:
  schedule:
    # Run every 3 hours
    - cron: 0 */3 * * *
  workflow_dispatch: {}

jobs:
  # This workflow has only one job.
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        ssh-key: ${{ secrets.data_daily_update }}
        path: site

    # Checkout news scraper repo
    - name: Checkout Data Scraper
      uses: actions/checkout@v2
      with:
        ssh-key: ${{ secrets.data_daily_update }}
        repository: sfbrigade/data-covid19-sfbayarea
        path: scraper

    # The scraper uses Python 3.8+, so make sure we've got the latest 3.x
    - name: Set up Python 3.x
      uses: actions/setup-python@v1
      with:
        python-version: '3.x'

    - name: Cache Python Dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        # NOTE: we can hash these requirements files together, but keeping them
        # separate allows us to load a partial cache if only the dev
        # requirements have changed.
        key: ${{ runner.os }}-pip-${{ hashFiles('scraper/requirements.txt') }}-${{ hashFiles('scraper/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ hashFiles('scraper/requirements.txt') }}-
          ${{ runner.os }}-pip-

    # Install dependencis
    - name: Install libxml2-dev libxslt-dev
      run: sudo apt-get install libxml2-dev libxslt-dev

    # - The commit that was checked out will be available as $SCRAPER_COMMIT.
    - name: Install Data Scraper & Dependencies
      run: |
        cd ${GITHUB_WORKSPACE}/scraper
        python -m pip install --upgrade pip
        pip install -r requirements.txt;

        # Keep track of the version used so we can use it in commit messages
        echo "SCRAPER_COMMIT='$(git rev-parse HEAD)'" >> $GITHUB_ENV

    # Run the news scraper
    - name: Scrape News
      id: scrape_news
      # The scraper may error on some counties but succeed on others. We want to
      # continue so that we still generate PRs for partial successes. We'll handle
      # failures in a later step.
      continue-on-error: true
      run: |
        echo "SCRAPER_TIME='$(date)'" >> $GITHUB_ENV
        cd ${GITHUB_WORKSPACE}/scraper
        python scraper_news.py --format json_feed --format rss --output "${GITHUB_WORKSPACE}/site/data/news/" 2> errors.txt
    
    - name: Commit Changes
      run: |
        cd ${GITHUB_WORKSPACE}/site
        git config user.name ${{ secrets.githubaction_config_user_name }}
        git config user.email ${{ secrets.githubaction_config_user_email }}

        git add data/news/
        git commit -F - << EOF
        GitHubAction: news update

        Created with commit ${{env.SCRAPER_COMMIT}} from sfbrigade/data-covid19-sfbayarea
        https://github.com/sfbrigade/data-covid19-sfbayarea/commit/${{env.SCRAPER_COMMIT}}
        EOF
        
        git push
        echo 'Git commit and push completed for the daily news data update.'

    - name: Send Errors to Slack and Fail
      if: ${{ steps.scrape_news.outcome == 'failure' }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        ERRORS_PATH="${GITHUB_WORKSPACE}/scraper/errors.txt"
        
        echo "Encountered the following errors while scraping:"
        echo "------------------------------------------------"
        echo `cat "${ERRORS_PATH}"`
          
        # The error text can contain unescaped quotes, newlines, etc.
        # Use jq to make sure we are composing correctly formatted JSON.
        # `--raw-input` treats the input as strings instead of JSON.
        # `--slurp` causes all lines to be combined into one string.
        ERRORS_JSON=`cat "${ERRORS_PATH}" | jq --slurp --raw-input '{"text": ("*News Errors:*\n" + .)}'`
        curl -X POST -H 'Content-type: application/json' --data "${ERRORS_JSON}" $SLACK_WEBHOOK_URL
        
        echo "Marking workflow as failed."
        false
